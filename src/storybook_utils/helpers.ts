import type { Meta } from "@storybook/react"
import {
  StoryConfig,
  StoryTypes,
  githubMainBranch,
  octocatURL,
  storybookPath,
} from "./packageConstants.ts" // keep extension, generateReadmes.ts needs it
import { merge } from "utils"

export const parseUnquotedJSON = (unquoted: string) =>
  JSON.parse(unquoted.replace(/([A-Za-z]+):/g, '"$1":'))

// Used for linking from github readme to storybook
export const getStoryURL = (type: StoryTypes, name: string) =>
  `${storybookPath}?path=/docs/${type.toLocaleLowerCase()}s-${name.toLocaleLowerCase()}--docs`
export const getGithubStoryLink = (type: StoryTypes, name: string) =>
  `<h4>See [examples and full documentation](${getStoryURL(type, name)})</h4>`

// Used for linking from storybook story to github readme
export const getGithubURL = (type: StoryTypes, name: string) =>
  `${githubMainBranch}/src/${type.toLocaleLowerCase()}s/${name}`
export const getStoryGithubLink = (type: StoryTypes, name: string) =>
  `<h4>[<img src="${octocatURL}" height="25px" style="margin-bottom: -5px" />&nbsp;&nbsp;See this ${type}'s Source Code](${getGithubURL(
    type,
    name,
  )})</h4>`

const TITLE_PLACEHOLDER = "INSERT_TITLE_HERE"
const LINKS_PLACEHOLDER = "INSERT_LINKS_HERE"

const generateReadme = (
  config: StoryConfig,
) => `<!--- Auto-Generated Readme. Do not edit this. Instead edit the generateReadme function or the story's config.ts file --->
${TITLE_PLACEHOLDER}${config.description}
<br><br>

${LINKS_PLACEHOLDER}

<h3>Usage</h3>

\`\`\`javascript
${config.usage}
\`\`\``

export const generateStoryReadme = (storyConfig: StoryConfig) => {
  const readme = generateReadme(storyConfig)
  const links: string[] = []

  if (storyConfig.alternative) {
    const alternativeURL = getStoryURL(
      (storyConfig.type as StoryTypes) === StoryTypes.Component
        ? StoryTypes.Hook
        : StoryTypes.Component,
      storyConfig.alternative,
    )
    links.push(
      `See the ${
        storyConfig.type === StoryTypes.Hook ? "component" : "hook"
      }-based solution: [${storyConfig.alternative}](${alternativeURL})`,
    )
  }
  links.push(getStoryGithubLink(storyConfig.type, storyConfig.name))

  return (
    readme
      .replace(TITLE_PLACEHOLDER, "") // Storybook adds title by default, so can omit
      .replace(/<h3>/g, '<h3 style="margin-bottom: -15px">') // remove spacing from h3 tags in mdx
      .replace(/<br><br>/g, "<br>") // md seemingly needs more spacing than mdx :shrug:
      .replace(LINKS_PLACEHOLDER, links.join("<br><br>")) +
    `

    <h3 style="margin-bottom: -10px">Demo</h3>`
  )
}

export const generatePackageReadme = (storyConfig: StoryConfig) => {
  const readme = generateReadme(storyConfig)
  const links: string[] = []

  if (storyConfig.alternative) {
    const alternativeURL = getGithubURL(
      (storyConfig.type as StoryTypes) === StoryTypes.Component
        ? StoryTypes.Hook
        : StoryTypes.Component,
      storyConfig.alternative,
    )
    links.push(
      `See the ${
        storyConfig.type === StoryTypes.Hook ? "component" : "hook"
      }-based solution: [${storyConfig.alternative}](${alternativeURL})`,
    )
  }
  links.push(getGithubStoryLink(storyConfig.type, storyConfig.name))

  return readme
    .replace(TITLE_PLACEHOLDER, `<h1>${storyConfig.name}</h1>`)
    .replace(LINKS_PLACEHOLDER, links.join("<br>"))
}

// Returns a consistent Meta object type with common settings for structuring Storybook pages
export const getStoryMeta = (storyConfig: StoryConfig, mutations?: Meta) => {
  const base = {
    component: storyConfig.component,
    parameters: {
      layout: "centered",
      docs: {
        description: {
          component: generateStoryReadme(storyConfig),
        },
      },
      deepControls: { enabled: true },
    },
    tags: ["autodocs"],
  }
  if (mutations) {
    return merge(base, mutations)
  }
  return base
}

export const getMarkdownComment = () =>
  "<!--- Autogenerated Readme. Do not edit. Edit the README_TEMPLATE.md file instead. --->\n"

export const getMarkdownHowToInstall =
  () => `Install the entire module as a dependency from npm as normal:

\`\`\`bash
npm i localboast
\`\`\`

or

\`\`\`bash
yarn add localboast
\`\`\`

**Note**: As this library is intended to be all-inclusive, it has no dependencies other than peer-dependencies of \`react\` and \`react-dom\`. This means it should have minimal compatibility issues with any app.`

export const getMarkdownFooter = () => `# Docs/Example

This library is developed and documented through storybook.
A static build of this storybook app can be found at https://LocalBoast.com/docs
(Note: that entire website is built as a showcase of sorts for the LocalBoast library, but the \`/docs\` route is a direct embed of the full storybook app).

While I intend on keeping the above public build up to date with the functionality of this library, I cannot guarantee that it'll always be up to date. If you need docs for the latest and greatest, you can run it locally by cloning this repository and running \`yarn run storybook\`

# Live Development

In an attempt to be somewhat unique, the development of this project is largely happening live on stream over on [Twitch](https://twitch.tv/localboast1) or on [YouTube Live](http://youtube.com/channel/UCt-IaL4qQsOU6_rbS7zky1Q/live). A record of all past live streams and other video documentation can also be found at the above YouTube channel.

# Donations

I'm working on this instead of having a job that pays me. So for the time being, I'm going to be funded through generosity alone. If you're feeling generous, here are some links:

- Buy me a Coffee (Ko-fi - will show up on stream if I'm live): https://ko-fi.com/localboast
- Patreon: https://patreon.com/LocalBoast

# License

MIT Â© [ConorKelleher](https://github/com/ConorKelleher)`

export type TableOfContents = { [exportKey: string]: string[] }

export const getMarkdownTableOfContents = (
  contentsData: string[] | TableOfContents,
  parentPath?: string,
) => {
  let table = ""

  if (Array.isArray(contentsData)) {
    console.log("is array. ContentsData: ", JSON.stringify(contentsData))
    table = contentsData
      .map((title) => `- [${title}](${parentPath}/${title})`)
      .join("\n")
  } else {
    table = Object.entries(contentsData)
      .map(([exportName, contents]) => {
        const exportFilePath = `src/${exportName.toLocaleLowerCase()}`
        return `- [${exportName}](${exportFilePath})\n${getMarkdownTableOfContents(
          contents,
          exportFilePath,
        )
          .split("\n")
          .map((entry) => `\t${entry}`)
          .join("\n")}`
      })
      .join("\n")
  }

  return table
}

export const populateTemplate = (
  template: string,
  contentsData: string[] | TableOfContents,
) =>
  template
    .replace(/^/, getMarkdownComment())
    .replace("INSERT_HOW_TO_INSTALL_HERE", getMarkdownHowToInstall())
    .replace("INSERT_CONTENTS_HERE", getMarkdownTableOfContents(contentsData))
    .replace("INSERT_FOOTER_HERE", getMarkdownFooter())
